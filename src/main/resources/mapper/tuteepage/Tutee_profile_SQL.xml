<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="TuteeProfile"> 
	<select id="TutoringDetail" parameterType="hashMap" resultType="hashMap">
	
	SELECT 
	 TUTORING_TUTOR.THUMBNAIL_PATH
     , TUTORING_TUTOR.TITLE
     , TUTORING_TUTOR.TUTORING_TUTOR_ID
     , TUTORING_TUTOR.TUTOR_ID
     , (ENTIRE_PERIOD/7) AS WEEK_PERIOD
     , TUTEE.PROF_PATH
     , TUTORING_TUTOR.INTRO
     , REGION.REG_NAME
     , REGION.REG_LAT
     , REGION.REG_LONG
     , TO_CHAR(TUTORING_TUTOR.START_DATE, 'YYYY-MM-DD') AS STARTDATE 
     , TUTORING_TUTOR.MIN_NUM
     , TUTORING_TUTOR.MAX_NUM
     , TUTORING_TUTOR.ENTRY_COST     
     , ((TO_NUMBER(SUBSTR(TUTORING_TUTOR.END_TIME, 1, 2))-TO_NUMBER(SUBSTR(TUTORING_TUTOR.START_TIME, 1, 2)))*TUTORING_TUTOR.ENTIRE_PERIOD) AS WHOLETIME
     , WEEK.WEEK_NAME
     , TUTORING_TUTOR.START_TIME
     , TUTORING_TUTOR.END_TIME
     , TUTOR_INFO.TUTOR_NAME
	FROM TUTORING_TUTOR, REGION, TUTEE, TUTOR_INFO, TUTORING_WEEK, WEEK
	WHERE TUTORING_TUTOR.TUTORING_TUTOR_ID=#{TUTORING_TUTOR_ID}
	AND TUTORING_TUTOR.TUTOR_ID=TUTOR_INFO.TUTOR_ID
	AND TUTOR_INFO.MEMBER_ID = TUTEE.MEMBER_ID
	AND TUTORING_TUTOR.REG_ID = REGION.REG_ID	
	AND TUTORING_TUTOR.TUTORING_TUTOR_ID  = TUTORING_WEEK.TUTORING_TUTOR_ID 
	AND TUTORING_WEEK.WEEK_NAME_ID=WEEK.WEEK_NAME_ID
	
	</select>
	
	
	<select id="TutoringDetail_review" parameterType="hashMap" resultType="hashMap">
	
	SELECT 
		TUTOR_ID, PROF_PATH, NICKNAME, WRITEDATE, CONTENT, REVIEW_GRADE
	FROM 
		LATESTREVIEW
	WHERE 
		TUTOR_ID = #{TUTOR_ID} AND ROWNUM=1
	
	
	</select>

	
	<!-- 튜터 프로필사진, 이름, 소개, 핸드폰번호 조회 -->
	<select id="info" parameterType="hashmap" resultType="hashmap">
		SELECT 
			  PROF_PATH
			, NICKNAME
			, LOGIN_MAIL
		FROM 
			 TUTEE 
		WHERE 
			 MEMBER_ID = #{MEMBER_ID}
	</select>
		
	
	<select id="interest" parameterType="hashmap" resultType="hashmap">
		
		SELECT 
		 	   S.TEST_LANG
			 , L.LANG_GRADE
			 , I.INTEREST_CAT
			 , C.CATEGORIE_NAME
		FROM 
			 TUTEE T
			 , SELFTEST S
			 , LANGGRADE L
			 , TUTEE_INTEREST TI
			 , INTEREST I
			 , CATEGORIE C
		WHERE 
			 T.MEMBER_ID= #{MEMBER_ID}
		AND 
			 T.MEMBER_ID=S.MEMBER_ID
		AND 
			 S.LANG_GRADE_ID=L.LANG_GRADE_ID
		AND 
			 T.MEMBER_ID=TI.MEMBER_ID
		AND 
			 TI.INTEREST_ID=I.INTEREST_ID
		AND 
			 I.CATEGORIE_ID=C.CATEGORIE_ID

	</select>
	

	
	<select id="writtenComm" parameterType="hashmap" resultType="hashmap">
	<![CDATA[
		SELECT 
		    T.MEMBER_ID
		    ,T.PROF_PATH
		    , (SELECT COUNT(IC.ISSU_ID) 
		       FROM ISSUE_COUPON IC        
		       LEFT JOIN TUTORING_ENROLL TE
		       ON IC.MEMBER_ID = TE.MEMBER_ID
		       WHERE TE.MEMBER_ID = #{MEMBER_ID})  
		       AS COUPONNUM    
		    , QT.TITLE
		    , QT.WRITEDATE
		    , QT.HITCOUNT
		    , QT.QT_ID
		FROM 
			TUTEE T
			, QTBOARD QT
		WHERE 
			T.MEMBER_ID= #{MEMBER_ID}
		AND 
			T.MEMBER_ID=QT.MEMBER_ID
	]]>
	</select>
	
	
	<select id="writtenCom" parameterType="hashmap" resultType="hashmap">
	<![CDATA[
	
		SELECT 
			T.MEMBER_ID
			, T.PROF_PATH
		    , (SELECT COUNT(IC.ISSU_ID) 
		       FROM ISSUE_COUPON IC 
		       LEFT JOIN TUTORING_ENROLL TE
		       ON IC.MEMBER_ID = TE.MEMBER_ID
		       WHERE TE.MEMBER_ID = T.MEMBER_ID)
		       AS COUPONNUM 
		    , TT.TT_TITLE
		    , TT.WRITEDATE
		    , TT.HITCOUNT
		    , TT.TT_ID
		    
		FROM 
			TUTEE T
			, TTBOARD TT
			, TUTORING_ENROLL TE
		WHERE 
			T.MEMBER_ID = #{MEMBER_ID}
		AND 
			T.MEMBER_ID=TE.MEMBER_ID
		AND 
			TE.ENROLL_ID=TT.ENROLL_ID
			
	]]>
	</select>
	
	<select id="qtReply" parameterType="hashmap" resultType="hashmap">
	<![CDATA[
	
	SELECT 
		QC.CONTENT
		, QC.WRITEDATE
	FROM 
		TUTEE T
		, QTBOARD_COMM QC
	WHERE 
		T.MEMBER_ID = #{MEMBER_ID}
	AND 
		T.MEMBER_ID=QC.MEMBER_ID
	ORDER BY 
		QC.WRITEDATE DESC
			
	]]>
	</select>
	
	
	<select id="tutoringReply" parameterType="hashmap" resultType="hashmap">
	<![CDATA[
	
	SELECT 
		TC.CONTENT
		, TC.WRITEDATE
	FROM 
		TUTEE T
		, TUTORING_ENROLL TE
		, TTBOARD_COMM TC
	WHERE 
		T.MEMBER_ID = #{MEMBER_ID}
	AND 
		T.MEMBER_ID = TE.MEMBER_ID
	AND 
		TE.ENROLL_ID = TC.ENROLL_ID
	ORDER BY 
		TC.WRITEDATE DESC
				
	]]>
	</select>
	
	<!-- <select id="tutoringAfter" parameterType="hashmap" resultType="hashmap">
	<![CDATA[
	SELECT 
		TUTORING_TUTOR.THUMBNAIL_PATH
        , TUTORING_TUTOR.TITLE
        , TO_CHAR(TUTORING_TUTOR.START_DATE,'YYYY-MM-DD') AS START_DATE
        , TUTORING_TUTOR.TUTORING_TUTOR_ID
        , TUTORING_TUTOR.TUTOR_ID
        , (ENTIRE_PERIOD/7) AS WEEK_PERIOD
        , TE.PROF_PATH
        , (SELECT
                COUNT(*)
           FROM
                TUTORING_ENROLL
           WHERE
                TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID) -
          (SELECT
                 COUNT(*) 
           FROM 
                 TUTORING_DROP TD 
                 JOIN 
                 	TUTORING_ENROLL TE 
                 ON 
                 	TD.ENROLL_ID = TE.ENROLL_ID
                 JOIN 
                 	TUTORING_TUTOR TT 
                 ON 
                 	TT.TUTORING_TUTOR_ID = TE.TUTORING_TUTOR_ID
           WHERE 
           	TT.TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID) AS COUNT_TUTORING
         , (SELECT 
         		COUNT(*) 
         	FROM 
         		TUTORING_DROP TD 
         	WHERE 
         		TD.ENROLL_ID = TUTORING_ENROLL.ENROLL_ID ) AS AMIDROP
         , TUTORING_DROP.REQUEST_ID
         , TUTORING_DROP.TARGET_ID
        
	FROM 
		TUTORING_TUTOR 
		JOIN 
			TUTORING_ENROLL    
		ON 
			TUTORING_ENROLL.TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID
        LEFT JOIN 
        	TUTORING_DROP 
        ON 
        	TUTORING_ENROLL.ENROLL_ID=TUTORING_DROP.ENROLL_ID
        LEFT JOIN 
        	TUTEE       
        ON 
        	TUTEE.MEMBER_ID=TUTORING_ENROLL.MEMBER_ID
        JOIN 
        	TUTOR_INFO  
        ON 
        	TUTOR_INFO.TUTOR_ID = TUTORING_TUTOR.TUTOR_ID
        JOIN 
        	TUTEE TE           
        ON 
        	TUTOR_INFO.MEMBER_ID = TE.MEMBER_ID
	WHERE
   		TUTEE.MEMBER_ID=7 AND START_DATE>SYSDATE AND PROGRESS_ID!=5 AND TUTORING_DROP.REQUEST_ID IS NULL
	ORDER BY 
		START_DATE;
			
	]]>
	</select> -->
	
	
	<!-- 현재 진행중 튜터링 상세 -->
	<select id="tuteeingDetail" parameterType="hashmap" resultType="hashmap">
	<![CDATA[
	
	SELECT 
		TUTEE.MEMBER_ID
		, TUTORING_ENROLL.TUTORING_TUTOR_ID
		, TUTORING_TUTOR.TUTOR_ID
	    , (SELECT T.PROF_PATH
	        FROM TUTEE T, TUTOR_INFO
	        WHERE TUTORING_TUTOR.TUTOR_ID = TUTOR_INFO.TUTOR_ID
	        AND TUTOR_INFO.MEMBER_ID = T.MEMBER_ID) AS TUTOR_PROF
	    , TUTORING_TUTOR.TITLE
	    , TUTORING_TUTOR.THUMBNAIL_PATH
	    , TUTORING_ENROLL.ENROLL_ID
	    , (SELECT
	             COUNT(*)
	         FROM
	             TUTORING_ENROLL
	         WHERE
	             TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID) - 
	          (SELECT
	             COUNT(*) 
	           FROM 
	             TUTORING_DROP TD JOIN TUTORING_ENROLL TE ON TD.ENROLL_ID = TE.ENROLL_ID
	             JOIN TUTORING_TUTOR TT ON TT.TUTORING_TUTOR_ID = TE.TUTORING_TUTOR_ID
	           WHERE TT.TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID) AS COUNT_TUTORING
	    , (TUTORING_TUTOR.ENTIRE_PERIOD/7) AS WEEK_PERIOD
	    , TO_CHAR(TUTORING_TUTOR.START_DATE, 'YYYY-MM-DD') AS START_DATE
	    , TUTORING_TUTOR.INTRO AS TUTORING_INTRO
    	, TUTOR_INFO.INTRO AS TUTOR_INTRO
    	, REGION.REG_NAME
	    , REGION.REG_LAT
	    , REGION.REG_LONG
	    , WEEK.WEEK_NAME
	    , TUTORING_TUTOR.MIN_NUM
	    , TUTORING_TUTOR.MAX_NUM
	    , TUTORING_TUTOR.ENTRY_COST
	    , TUTORING_TUTOR.START_TIME
	    , TUTOR_INFO.TUTOR_NAME
	    , TUTOR_REVIEW.CONTENT
	    , TUTEE.NICKNAME
  	    , TUTOR_REVIEW.WRITEDATE
  	    , TUTEE.PROF_PATH AS TUTEE_PROF_PATH
	FROM 
		TUTEE
		, TUTORING_ENROLL
		, TUTORING_TUTOR
		, TUTOR_INFO
		, REGION
	    , TUTORING_WEEK
	    , WEEK	    
	    , TUTOR_REVIEW
	WHERE 
		TUTEE.MEMBER_ID=#{MEMBER_ID}
	AND TUTEE.MEMBER_ID=TUTORING_ENROLL.MEMBER_ID
	AND TUTORING_ENROLL.TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID
	AND TUTORING_TUTOR.TUTOR_ID = TUTOR_INFO.TUTOR_ID
	AND (TUTORING_TUTOR.START_DATE<SYSDATE AND TUTORING_TUTOR.START_DATE+ENTIRE_PERIOD>SYSDATE)
	AND TUTORING_TUTOR.REG_ID = REGION.REG_ID
	AND TUTORING_TUTOR.TUTORING_TUTOR_ID = TUTORING_WEEK.TUTORING_TUTOR_ID
	AND TUTORING_WEEK.WEEK_NAME_ID = WEEK.WEEK_NAME_ID
	AND TUTORING_ENROLL.ENROLL_ID =TUTOR_REVIEW.ENROLL_ID
	
				
	]]>
	</select>
	
	
	<select id="tutoringfaq" parameterType="hashMap" resultType="hashMap">
	
	SELECT 
	      TUTOR_FAQ.FAQ_ID
	    , TUTOR_FAQ.PAR_FAQ_ID
	    , TUTOR_FAQ.FAQ_CONTENT
	    , TUTOR_FAQ.FAQ_DATE
	    , TUTEE.NICKNAME
	    , TUTOR_INFO.TUTOR_NAME
	    , TUTOR_FAQ.MEMBER_ID
	FROM 
	     TUTORING_TUTOR 
	     JOIN TUTOR_FAQ  
	     ON TUTORING_TUTOR.TUTORING_TUTOR_ID=TUTOR_FAQ.TUTORING_TUTOR_ID
	     LEFT JOIN TUTEE    
	     ON TUTOR_FAQ.MEMBER_ID = TUTEE.MEMBER_ID
	     LEFT JOIN TUTORING_ENROLL   
	     ON TUTORING_ENROLL.MEMBER_ID = TUTEE.MEMBER_ID
	     LEFT JOIN TUTOR_INFO  
	     ON TUTORING_TUTOR.TUTOR_ID = TUTOR_INFO.TUTOR_ID     
	WHERE 
	    TUTORING_TUTOR.TUTOR_ID=#{TUTOR_ID} AND TUTORING_TUTOR.TUTORING_TUTOR_ID = #{TUTORING_TUTOR_ID}
	START WITH PAR_FAQ_ID IS NULL
	CONNECT BY PRIOR TUTOR_FAQ.FAQ_ID = TUTOR_FAQ.PAR_FAQ_ID
	ORDER SIBLINGS BY TUTOR_FAQ.FAQ_DATE
	
	
	</select>
	
	
	<select id="refund" parameterType="hashMap" resultType="hashMap">
	<![CDATA[
		SELECT TUTEE.MEMBER_ID
		     , TUTORING_TUTOR.TITLE
		     , TO_CHAR(TUTORING_TUTOR.START_DATE, 'YYYY-MM-DD') AS START_DATE
		     , TO_CHAR(SYSDATE, 'YYYY-MM-DD') AS TODAY_DATE
		     , (SELECT CASE WHEN TT.START_DATE+(TT.ENTIRE_PERIOD*0.3) < SYSDATE 
		               THEN TT.ENTRY_COST*0.6
		               WHEN TT.START_DATE+(TT.ENTIRE_PERIOD*0.5) < SYSDATE
		               THEN TT.ENTRY_COST*0.5
		               ELSE NULL 
		               END REFUND
       FROM 
       		TUTORING_TUTOR TT 
       WHERE 
       		TUTORING_TUTOR.TUTORING_TUTOR_ID=TT.TUTORING_TUTOR_ID) AS REFUND_COST
	   FROM 
		    TUTEE, TUTORING_ENROLL, TUTORING_TUTOR
	   WHERE 
		    TUTEE.MEMBER_ID = #{MEMBER_ID}
		AND TUTEE.MEMBER_ID=TUTORING_ENROLL.MEMBER_ID
		AND TUTORING_ENROLL.TUTORING_TUTOR_ID=TUTORING_TUTOR.TUTORING_TUTOR_ID
		AND (TUTORING_TUTOR.START_DATE<SYSDATE AND TUTORING_TUTOR.START_DATE+ENTIRE_PERIOD>SYSDATE)
	]]>
	</select>
	
	
	<select id="AfterTutoringDetail" parameterType="hashMap" resultType="hashMap">
	SELECT TUTEE.MEMBER_ID, TUTORING_ENROLL.TUTORING_TUTOR_ID, TUTORING_TUTOR.TUTOR_ID
    , (SELECT T.PROF_PATH
        FROM TUTEE T, TUTOR_INFO
        WHERE TUTORING_TUTOR.TUTOR_ID = TUTOR_INFO.TUTOR_ID
        AND TUTOR_INFO.MEMBER_ID = T.MEMBER_ID) AS TUTOR_PROF
    , TUTORING_TUTOR.TITLE
    , TUTORING_TUTOR.THUMBNAIL_PATH
    , TUTORING_ENROLL.ENROLL_ID
    , (SELECT
                COUNT(*)
         FROM
             TUTORING_ENROLL
         WHERE
             TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID) - 
          (SELECT
                 COUNT(*) 
           FROM 
                 TUTORING_DROP TD JOIN TUTORING_ENROLL TE ON TD.ENROLL_ID = TE.ENROLL_ID
                                 JOIN TUTORING_TUTOR TT ON TT.TUTORING_TUTOR_ID = TE.TUTORING_TUTOR_ID
           WHERE TT.TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID) AS COUNT_TUTORING
    , (TUTORING_TUTOR.ENTIRE_PERIOD/7) AS WEEK_PERIOD
    , TO_CHAR(TUTORING_TUTOR.START_DATE, 'YYYY-MM-DD') AS START_DATE
     , TUTORING_TUTOR.INTRO
    , TUTOR_INFO.INTRO AS TUTOR_INTRO
    , REGION.REG_NAME
     , REGION.REG_LAT
     , REGION.REG_LONG
     , WEEK.WEEK_NAME
    , TUTORING_TUTOR.MIN_NUM
    , TUTORING_TUTOR.MAX_NUM
    , TUTORING_TUTOR.ENTRY_COST
    , TUTORING_TUTOR.START_TIME
    , TUTOR_INFO.TUTOR_NAME
    , TUTOR_REVIEW.CONTENT
    , TUTEE.NICKNAME
    , TUTOR_REVIEW.WRITEDATE
    , TUTEE.PROF_PATH AS TUTEE_PROF_PATH
	FROM TUTEE, TUTORING_ENROLL
	    , TUTORING_TUTOR
	    , TUTOR_INFO
	    , REGION
	    , TUTORING_WEEK
	    , WEEK    
	    , TUTOR_REVIEW    
	WHERE TUTEE.MEMBER_ID=#{MEMBER_ID}
	AND TUTEE.MEMBER_ID=TUTORING_ENROLL.MEMBER_ID
	AND TUTORING_ENROLL.TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID
	AND TUTORING_TUTOR.TUTOR_ID = TUTOR_INFO.TUTOR_ID
	AND TUTORING_TUTOR.START_DATE>SYSDATE
	AND TUTORING_TUTOR.REG_ID = REGION.REG_ID
	AND TUTORING_TUTOR.TUTORING_TUTOR_ID = TUTORING_WEEK.TUTORING_TUTOR_ID
	AND TUTORING_WEEK.WEEK_NAME_ID = WEEK.WEEK_NAME_ID
	AND TUTORING_ENROLL.ENROLL_ID =TUTOR_REVIEW.ENROLL_ID
	
	</select>
	
	<select id = "nicknamecoupon" parameterType="hashMap" resultType="hashMap">
	SELECT T.NICKNAME
         , (
            SELECT COUNT(ISSUE_COUPON.ISSU_ID) 
		       FROM TUTEE, ISSUE_COUPON
               WHERE TUTEE.MEMBER_ID=T.MEMBER_ID
               AND TUTEE.MEMBER_ID=ISSUE_COUPON.MEMBER_ID               
		       )
		       AS COUPONNUM
	FROM TUTEE T
	WHERE T.MEMBER_ID = #{MEMBER_ID}
	
	</select>
	
	
	<insert id = "tutoringDrop">
	INSERT INTO 
		TUTORING_DROP
			(TUTORING_DROP_SEQ.NEXTVAL
			, ENROLL_ID
			, REQUEST_ID
			, TARGET_ID
			, ACCOUNT_NUM
			, REFUND_COST
			, APPROVAL_DATE
			, ACCOUNT_NAME
			, BANK_ID
			, DROP_DATE)
		VALUES
			(1
			, #{ENROLL_ID}
			, 0
			, 1
			, '112-2234'
			, '50000'
			, SYSDATE
			, '솔잎'
			, 3
			, SYSDATE)	
	
	</insert>
	
	
	<!-- 이전튜터링 상세페이지 -->
	<select id="BeforeTutoringDetail" parameterType="hashMap" resultType="hashMap">
	<![CDATA[
	SELECT TUTEE.MEMBER_ID, TUTORING_ENROLL.TUTORING_TUTOR_ID, TUTORING_TUTOR.TUTOR_ID
    , (SELECT T.PROF_PATH
        FROM TUTEE T, TUTOR_INFO
        WHERE TUTORING_TUTOR.TUTOR_ID = TUTOR_INFO.TUTOR_ID
        AND TUTOR_INFO.MEMBER_ID = T.MEMBER_ID) AS TUTOR_PROF
    , TUTORING_TUTOR.TITLE
    , TUTORING_TUTOR.THUMBNAIL_PATH
    , TUTORING_TUTOR.TUTOR_ID
    , (SELECT
                COUNT(*)
         FROM
             TUTORING_ENROLL
         WHERE
             TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID) - 
          (SELECT
                 COUNT(*) 
           FROM 
                 TUTORING_DROP TD JOIN TUTORING_ENROLL TE ON TD.ENROLL_ID = TE.ENROLL_ID
                                 JOIN TUTORING_TUTOR TT ON TT.TUTORING_TUTOR_ID = TE.TUTORING_TUTOR_ID
           WHERE TT.TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID) AS COUNT_TUTORING
    , (TUTORING_TUTOR.ENTIRE_PERIOD/7) AS WEEK_PERIOD
    , TO_CHAR(TUTORING_TUTOR.START_DATE, 'YYYY-MM-DD') AS START_DATE
     , TUTORING_TUTOR.INTRO
    , TUTOR_INFO.INTRO AS TUTOR_INTRO
    , REGION.REG_NAME
     , REGION.REG_LAT
     , REGION.REG_LONG
     , WEEK.WEEK_NAME
    , TUTORING_TUTOR.MIN_NUM
    , TUTORING_TUTOR.MAX_NUM
    , TUTORING_TUTOR.ENTRY_COST
    , TUTORING_TUTOR.START_TIME
    , TUTOR_INFO.TUTOR_NAME
    , TUTOR_REVIEW.CONTENT
    , TUTEE.NICKNAME
    , TUTOR_REVIEW.WRITEDATE
    , TUTEE.PROF_PATH AS TUTEE_PROF_PATH
	FROM TUTEE, TUTORING_ENROLL
	    , TUTORING_TUTOR
	    , TUTOR_INFO
	    , REGION
	    , TUTORING_WEEK
	    , WEEK    
	    , TUTOR_REVIEW    
	WHERE TUTEE.MEMBER_ID=#{MEMBER_ID}
	AND TUTEE.MEMBER_ID=TUTORING_ENROLL.MEMBER_ID
	AND TUTORING_ENROLL.TUTORING_TUTOR_ID = TUTORING_TUTOR.TUTORING_TUTOR_ID
	AND TUTORING_TUTOR.TUTOR_ID = TUTOR_INFO.TUTOR_ID
	AND (TUTORING_TUTOR.START_DATE + TUTORING_TUTOR.ENTIRE_PERIOD)<SYSDATE
	AND TUTORING_TUTOR.REG_ID = REGION.REG_ID
	AND TUTORING_TUTOR.TUTORING_TUTOR_ID = TUTORING_WEEK.TUTORING_TUTOR_ID
	AND TUTORING_WEEK.WEEK_NAME_ID = WEEK.WEEK_NAME_ID
	AND TUTORING_ENROLL.ENROLL_ID =TUTOR_REVIEW.ENROLL_ID
	]]>
	
	</select>
	
	
	<!-- 예약튜터링 상세페이지 -->
	<select id="ReservationTutoringDetail" parameterType="hashMap" resultType="hashMap">
	<![CDATA[
	
	SELECT TUTEE.MEMBER_ID
    , TUTORING_TUTEE.MEMBER_ID    
    , TUTORING_TUTEE.TUTORING_TITLE    
    , (SELECT T.PROF_PATH
        FROM TUTORING_TUTEE TT, TUTEE T
        WHERE TUTORING_RESERVATION.TUTORING_TUTEE_ID=TT.TUTORING_TUTEE_ID
        AND TT.MEMBER_ID = T.MEMBER_ID
        ) AS TUTEEJANG_PROF    
    , (SELECT
            COUNT(*)
         FROM
             TUTORING_RESERVATION TR
         WHERE
             TUTORING_RESERVATION.TUTORING_TUTEE_ID=TR.TUTORING_TUTEE_ID)
         AS COUNT_TUTORING
    , (TUTORING_TUTEE.ENTIRE_PERIOD/7) AS WEEK_PERIOD
    , TO_CHAR(TUTORING_TUTEE.UPLOAD_DATE, 'YYYY-MM-DD') AS UPLOAD_DATE
     , TUTORING_TUTEE.INTRO    
    , REGION.REG_NAME
     , REGION.REG_LAT
     , REGION.REG_LONG     
    , TUTORING_TUTEE.MIN_NUM
    , TUTORING_TUTEE.MAX_NUM
    , TUTORING_TUTEE.ENTRY_COST
    , TUTEE.NICKNAME    
    , TUTEE.PROF_PATH AS TUTEE_PROF_PATH
    
	FROM TUTEE
	    , TUTORING_TUTEE	    
	    , REGION	
        , TUTORING_RESERVATION        
	WHERE TUTEE.MEMBER_ID = #{MEMBER_ID} 
	AND TUTEE.MEMBER_ID=TUTORING_RESERVATION.MEMBER_ID    
    AND TUTORING_RESERVATION.TUTORING_TUTEE_ID = #{TUTORING_TUTEE_ID}
	AND TUTORING_RESERVATION.TUTORING_TUTEE_ID = TUTORING_TUTEE.TUTORING_TUTEE_ID	      
	AND TUTORING_TUTEE.REG_ID = REGION.REG_ID	
	
	
	]]>
	
	</select>
	
	
	

	

</mapper>

