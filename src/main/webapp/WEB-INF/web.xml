<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	
	<!-- 첫 페이지 -->
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
	
	<!--   필터  -->         
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>		
		
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	

	
	<!-- 
		 스프링을 동작하기 위한 설정파일들 읽어오기 ,
	     config => spring 안에 있는 context로 시작하는 모든 xml 파일 읽어옴
	-->
	<!--
	  - Location of the XML file that defines the root application context. 
	    (루트 응용 프로그램 컨텍스트를 정의하는 XML 파일의 위치)
	  - Applied by ContextLoaderListener.
	  	(ContextLoaderListener에 의해 적용)
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:config/spring/context-*.xml</param-value>
	</context-param>
	

	
	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 
		○ contextConfigLocation
			→ org.springframework.web.context.ContextLoaderListener
			   (스프링 설정파일 읽기)

		   - 스프링에서는 설정 파일을 활용하여
		     스프링이 운용하고 관리하게 되는 거의 모든 자원들을
		     명시(등록)해 주기 때문에 매우 중요하다.
		     설정 파일 안에는 dataSource, bean(dao, service) 등 
		     필요한 모든 객체가 다 들어있는 것이다.
		   - 이와 같은 이유로 
		     이 설정 파일들은 어떻게 해서 컨테이너 안에서 동작을 하는지
		     어떻게 xml 설정파일을 읽어 들이게 되는지 알아야 
		     스프링을 사용할 수 있다. 

		   - 가장 기본은 『web.xml』 파일에 스프링 설정 파일을 명시해주면 된다는 것.
		   - 스프링 설정 파일을 읽어 들이기 위해서는
		     org.springframework.web.context.ContextLoaderListener 가 필요하다. 
		     이 리스너가 동작해야 설정 파일을 읽어들이고 
		     설정 파일을 읽어들여야 필요한 객체들을 등록하고 만드는 것이다.
		   - 그렇다면 리스너가 동작하는 과정에서 설정 파일의 위치를 알려주어야 한다.
		   - 그렇기 때문에 <context-param> 안에 
		     contextConfigLocation 이라고 해서 위치를 지정해 주는 것이다.
		   - 하나의 파일이든 여러개든 명시해서 읽어올 수 가 있다.
		   
		   - 계층별로 나눈 xml 설정파일이 있다고 가정할 때,
		     web.xml 에서 모두 load 되도록 등록할 때 사용한다.
		   - 서블릿 이전에 서블릿 초기화하는 용도록 쓰이며,
		     contextConfigLocation라는 파라미터를 사용하면
		     Context Loader가 load할 수 있는 설정파일을 여러개 사용할 수 있다.
		     
		   - web.xml 에서 이 문장을 생략할 경우 기본적으로(default)
		     『/WEB-INF/applicationContext.xml (spring 설정파일)』을 사용하게 된다.

           [ web.xml ] start
           
           	<context-param>
           		<param-name>contextConfigLocation</param-name>
           		<param-value>
           			/WEB-INF/test-mybatis.xml
           			/WEB-INF/test-service.xml
           		</param-value>
           	</context-param>
           	
           	<listener>
           		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
           	</listener>

		    end [ web.xml ]	
	
	-->
		

	<!-- ○ 서블릿(프론트 컨트롤러) 등록
	  - Servlet that dispatches request to registered handlers 
	    (Controller implementations).
	     
	    ·load-on-startup
	    
	      web.xml 의 servlet 설정 시 구성되는 데이터 (숫자 형식)
	      서블릿은 최초 요청이 들어올때 초기화 된다.
	      클래스 로딩 인스턴스화 초기화 설정을 해야한다.
	      이렇게 되면 서버가 올라가고 맨처음 호출한 사용자는 
	      응답 받는 데 걸리는 시간이 평균의 보통 시간보다 오래걸린다.
	      이를 방지하기 위해 『load-on-startup』이 있다. 
	      
	      이 숫자가 0 보다 크면 서버가 스타트되면서 서블릿을 초기화 한다.
	      (음의 정수인 경우 그 서블릿에 접근될 때 
	       즉, load-on-startup 엘리먼트가 없는 경우와 동일하다)
	      하지만, 이는 0 보다 큰 값인 3 혹은 4 가 들어오거나 1이 들어오는 경우 
	      들어온 값대로 서블릿 인스턴스를 3, 4 혹은 1개만 띄우는 것이 아니고 
	      우선순위를 의미한다.  
	      0 보다 큰 값 중에서 가장 낮은 값을 갖는 항목이
	      가장 먼저 초기화 된다고 생각면 된다.
	      
	      그럼, 모든 서블릿을 1 로 설정하면 
	      어떤 항목이 먼저 초기화 되는가 라는 궁금함이 생길 수 있다.
	      이 경우 먼저 작성된 서블릿부터 초기화 된다.
	-->

	<!-- DispatcherServlet 등록 -->
	<servlet>
		<servlet-name>action</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/config/*-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>action</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>
